* slim
  Unlike other systems in this collection, ~slim~ is deployed to via [[https://nixos.org/nixops/][NixOps]]:
  #+begin_example
  $ nixops create -d slim configuration.nix
  $ nixops deploy -d slim
  #+end_example
  And for development, it can accept an ~-I~ flag, to append to the Nix search path:
  #+begin_example
  $ nixops deploy -I nixpkgs=/home/cmacrae/dev/personal/nixpkgs -d slim
  #+end_example

** Notes
*** Bootstrapping
    In order to deploy via NixOps, a minimum configuration must be reached.
    This should get us there (built on the remote system with standard ~nixos-rebuild switch~):
**** ~configuration.nix~
     #+begin_src nix
     # Minimal configuration required for NixOps bootstrapping
     { config, pkgs, ... }:
     
     {
       imports =
         [
           ./hardware-configuration.nix
         ];
     
       boot.cleanTmpDir = true;
       boot.loader.grub.efiSupport = true;
       boot.loader.grub.efiInstallAsRemovable = true;
       boot.loader.grub.zfsSupport = true;
       boot.loader.grub.copyKernels = true;
       boot.loader.grub.device = "nodev";
       boot.loader.efi.efiSysMountPoint = "/efi";
       boot.initrd.checkJournalingFS = false;
       boot.kernelPackages = pkgs.linuxPackages_latest;
       boot.supportedFilesystems = [ "zfs" ];
     
       networking.hostId = "7aeb7d41";
       networking.hostName = "slim";
       networking.firewall.enable = false;
     
       time.timeZone = "Europe/London";
     
       environment.systemPackages = with pkgs; [ vim ];
       services.openssh.enable = true;
       services.openssh.permitRootLogin = "yes";
       users.users.root.openssh.authorizedKeys.keys = [
           "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDI0ynIFxGh/vtMnReWNA0m0JVQHuP72vi3+jOUDvWZMU+rDX7uljyw8wAsD5u4D5G5GlDp+A0kUo2ASk+NMvz55885woLix/q7P63meeOKOepteIzwdHP6ZYdEzjlLZSCinvf9bumMyiTzqvA/cEFgmUfCz3LEQ9qzoo4b9y/W7J84cUJBTascE3VU6pdG3AIl7wR5VnXu6USuEQl/XVAPUV9y5w+7lwIfBLDXp4DaHnsP7Xc8gTovb/CpsLk7pknd0hPaIFsqTAUmVnplDxjSo/3E+MeCFbzqqt42HBCVQj+CHgwhsqIawll4B1FwnULJAiWhqFAzG6emprEYqN3x"
       ];
     
       system.stateVersion = "19.03";
     }
     #+end_src
 
**** ~hardware-configuration.ni~
     #+begin_src nix
     { config, lib, pkgs, ... }:

     {
       imports =
         [ <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
         ];
     
       boot.initrd.availableKernelModules = [ "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
       boot.kernelModules = [ "kvm-intel" ];
       boot.extraModulePackages = [ ];
     
       fileSystems."/" =
         { device = "rpool/root";
           fsType = "zfs";
         };
     
       fileSystems."/home" =
         { device = "rpool/home";
           fsType = "zfs";
         };
     
       fileSystems."/efi" =
         { device = "/dev/disk/by-uuid/DC70-F48B";
           fsType = "vfat";
         };
     
       swapDevices = [ ];
     
       nix.maxJobs = lib.mkDefault 4;
       powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
     }
     #+end_src
*** ~nzbget~ and ~cfg.user~ / ~cfg.group~ options
    There were some problems around permissions for the config file/data directory for
    ~nzbget~ when specifying the user/group to run the service as.
    I've put a PR in here: https://github.com/NixOS/nixpkgs/pull/58928
*** TODO Explore writing an ~nzbget~ config module/extending the current one
    Default config with all comments/blank lines stripped can be generated with:
    ~sed -E '/^#.*|^$/ d' path/to/default/nzbget.conf~
